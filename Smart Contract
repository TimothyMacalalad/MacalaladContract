# SmartContract
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    address public bankOwner;
    mapping(address => uint256) public accountBalances;

    event DepositMade(address indexed accountHolder, uint256 depositAmount);
    event WithdrawalMade(address indexed accountHolder, uint256 withdrawalAmount);

    constructor() {
        bankOwner = msg.sender;
    }

    function makeDeposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        accountBalances[msg.sender] += msg.value;
        emit DepositMade(msg.sender, msg.value);
    }

    function makeWithdrawal(uint256 withdrawAmount) public {
        require(withdrawAmount > 0, "Withdrawal amount must be greater than zero");
        require(accountBalances[msg.sender] >= withdrawAmount, "Insufficient balance");
        accountBalances[msg.sender] -= withdrawAmount;
        payable(msg.sender).transfer(withdrawAmount);
        emit WithdrawalMade(msg.sender, withdrawAmount);
    }

    function exampleAssert(uint256 num1, uint256 num2) public pure returns (uint256) {
        assert(num1 + num2 <= 100);
        return num1 + num2;
    }

    function exampleRevert(uint256 num) public pure returns (uint256) {
        if (num == 0) {
            revert("Value cannot be zero");
        }
        return num;
    }
}
