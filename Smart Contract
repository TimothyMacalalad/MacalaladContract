# Smart Contract
 // SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MemberRegistry {
    mapping(address => bool) public members;
    address[] public memberAddresses;

    event MemberRegistered(address indexed member);
    event MemberUnregistered(address indexed member);

    function register() public {
        require(!members[msg.sender], "Member already registered");
        
        members[msg.sender] = true;
        memberAddresses.push(msg.sender);
        
        emit MemberRegistered(msg.sender);
    }

    function unregister() public {
        require(members[msg.sender], "Member not registered");

        for (uint256 i = 0; i < memberAddresses.length; i++) {
            if (memberAddresses[i] == msg.sender) {
                memberAddresses[i] = memberAddresses[memberAddresses.length - 1];
                memberAddresses.pop();
                break;
            }
        }

        members[msg.sender] = false;

        emit MemberUnregistered(msg.sender);
    }

    function assertSum(uint256 a, uint256 b) public pure returns (uint256) {
        assert(a + b <= 200);
        return a + b;
    }

    function checkNonZero(uint256 value) public pure returns (uint256) {
        if (value == 0) {
            revert("Value cannot be zero");
        }
        return value;
    }
}
